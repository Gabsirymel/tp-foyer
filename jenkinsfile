<<<<<<< HEAD
pipeline {
    agent any  // Déclare que ce pipeline peut tourner sur n'importe quel agent

    environment {
        // Si tu utilises un conteneur Docker pour ton environnement, tu peux ajouter des variables ici.
    }

    stages {
        // Etape 1 : Installations initiales (dépendances)
        stage('Install Dependencies') {
            steps {
                script {
                    // Installer Lynis, Nmap et Trivy sur la machine (ou conteneur)
                    sh 'sudo apt update'
                    sh 'sudo apt install -y lynis nmap curl'
                    // Installer Trivy si ce n'est pas déjà installé
                    sh 'curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.35.0/trivy_0.35.0_Linux-64bit.deb -o trivy.deb'
                    sh 'sudo dpkg -i trivy.deb'
                }
            }
        }

        // Etape 2 : Scan de sécurité avec Lynis
        stage('System Security Check - Lynis') {
            steps {
                script {
                    echo "Lancement de l'audit de sécurité avec Lynis..."
                    sh 'lynis audit system | tee lynis_audit_output.txt'  // Exécution de l'audit et sauvegarde du résultat
                    archiveArtifacts artifacts: 'lynis_audit_output.txt', allowEmptyArchive: true  // Archive le rapport pour le consulter plus tard
                }
            }
        }

        // Etape 3 : Scan réseau avec Nmap
        stage('Security Scan: Nmap') {
            steps {
                script {
                    echo "Lancement du scan de sécurité réseau avec Nmap..."
                    sh 'nmap -sT -p 1-65535 -v localhost'  // Scan de tous les ports en local
                }
            }
        }

        // Etape 4 : Scan des vulnérabilités d'images Docker avec Trivy
        stage('Security Scan: Trivy') {
            steps {
                retry(3) {
                    echo "Lancement du scan des vulnérabilités d'images Docker avec Trivy..."
                    sh 'trivy image --no-progress --severity CRITICAL gabsirim/alpine:1.0.0'  // Scanne l'image Docker
                }
            }
        }

        // Etape 5 : Finalisation du build
        stage('Build and Deploy') {
            steps {
                echo 'Le build peut être lancé ici après les tests de sécurité'
                // Tu peux ajouter ici tes étapes de build ou de déploiement
            }        }
    }

    post {
        always {
            echo "Le pipeline est terminé."
            // Tu peux ajouter des étapes ici pour envoyer des notifications ou d'autres actions de post-traitement
        }
        success {
            echo "Le pipeline a réussi !"
        }
        failure {
            echo "Le pipeline a échoué, analyse les logs pour plus de détails."
        }
}
